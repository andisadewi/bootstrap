package DesignsStu;

import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import Backend.*;
import Frontend.Broadcaster;
import Frontend.Broadcaster.BroadcastListener;
import Frontend.MainUI;

import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.themes.Reindeer;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;

public class ButtonsStu extends Panel implements BroadcastListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7682266661126405095L;
	private MainUI main;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ButtonsStu(MainUI main) { 
		Broadcaster.register(this);
		this.main=main;
		setSizeFull();
		setCaption("Buttons :");
		setContent(buildMainVertical());
		
	} 
	 
	//LAYOUT VolumeButton + LayoutButtonsSpeed
	private VerticalLayout buildMainVertical(){
		if (main.getVeranstaltung()==0){
			VerticalLayout mainVertical = new VerticalLayout();
			mainVertical.setImmediate(false);
			mainVertical.setSizeFull();
			mainVertical.setMargin(false);
			mainVertical.setSpacing(true);
			mainVertical.addComponent(new Label("Noch keine Veranstaltung"));
			return mainVertical;
		}else {
		VerticalLayout mainVertical= new VerticalLayout();
		mainVertical.setImmediate(false);
		mainVertical.setSizeFull();
		mainVertical.setSpacing(true);
		mainVertical.setMargin(false);
		final Statement stm;
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
		//	final Lecture lecture = Lecture.selectLecture(stm, main.getVeranstaltung());
		// lauter
			
		Button lauter = new Button("Lauter", new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = -7757375689000818665L;

			@Override
			public void buttonClick(ClickEvent event) {
				try {
					ArrayList<VolumeButton> volList = VolumeButton.selectFromId(stm, main.getVeranstaltung());
					VolumeButton vol= getVolButton(volList);
					if (vol==null){
						vol = new VolumeButton(main.getLoggedInUser(), main.getVeranstaltung(), true);
						vol.insert(stm);
					}else {
						Notification.show("Du hast schon LAUTER geschrien!");
						
					}
					Broadcaster.broadcast("Buttons");
					
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		lauter.addStyleName(Reindeer.BUTTON_LINK);
		lauter.setIcon(new ThemeResource("Icons/Faenza/status/32/audio-volume-high.png"));
		lauter.setImmediate(true);
		mainVertical.addComponent(lauter);
		
		HorizontalLayout horizontalSpeed = buildHorizontalSpeed();
		mainVertical.addComponent(horizontalSpeed);
		
		return mainVertical;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return new VerticalLayout();
		}
		//BUTTONSSpeed
	}
	private HorizontalLayout buildHorizontalSpeed() {
		// common part: create layout
		HorizontalLayout horizontalSpeed = new HorizontalLayout();
		horizontalSpeed.setImmediate(false);
		horizontalSpeed.setMargin(false);
		horizontalSpeed.setSizeFull();
		horizontalSpeed.setSpacing(true);
		final Statement stm;
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
		//	final Lecture lecture = Lecture.selectLecture(stm, main.getVeranstaltung());
		// langsamer
		Button langsamer = new Button("Langsamer", new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 4478521259951713645L;

			@Override
			public void buttonClick(ClickEvent event) {
				
				
				try {
					ArrayList<SpeedButton> speedList = SpeedButton.selectFromId(stm, main.getVeranstaltung());
					SpeedButton speed= getSpeedButton(speedList);
					if (speed==null){
						speed = new SpeedButton(main.getLoggedInUser(), main.getVeranstaltung(), false);
						speed.insert(stm);
					}else {
						speed.setIncremented(false);
						speed.update(stm);	
					}
					Broadcaster.broadcast("Buttons");
					
				} catch (SQLException e) {
					e.printStackTrace();
				}
				
			}
		});
		langsamer.addStyleName(Reindeer.BUTTON_LINK);
		langsamer.setIcon(new ThemeResource("Icons/Faenza/actions/22/go-down.png"));
		langsamer.setImmediate(true);
		horizontalSpeed.addComponent(langsamer);
		
		// schneller
		Button schneller = new Button("Schneller", new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 7342197232700477897L;

			@Override
			public void buttonClick(ClickEvent event) {
				try {
					ArrayList<SpeedButton> speedList = SpeedButton.selectFromId(stm, main.getVeranstaltung());
					SpeedButton speed= getSpeedButton(speedList);
					if (speed==null){
						speed = new SpeedButton(main.getLoggedInUser(), main.getVeranstaltung(), true);
						speed.insert(stm);
					}else {
						speed.setIncremented(true);
						speed.update(stm);	
						
					}
					Broadcaster.broadcast("Buttons");
					
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		schneller.addStyleName(Reindeer.BUTTON_LINK);
		schneller.setIcon(new ThemeResource("Icons/Faenza/actions/22/go-up.png"));
		schneller.setImmediate(true);
		horizontalSpeed.addComponent(schneller);
		
		return horizontalSpeed;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return new HorizontalLayout();
	}
	private SpeedButton getSpeedButton(ArrayList<SpeedButton> speedList) {
		for (int i=0;i<speedList.size();i++){
			if (speedList.get(i).getLoginName().equals(main.getLoggedInUser())) return speedList.get(i);
		}
		return null;
	
	}
	private VolumeButton getVolButton(ArrayList<VolumeButton> volList) {
		for (int i=0;i<volList.size();i++){
			if (volList.get(i).getLoginName().equals(main.getLoggedInUser())) return volList.get(i);
		}
		return null;
	
	}
	
	
	
	public void receiveBroadcast(final String message) {
		try{
			main.access(new Runnable() {				
				@Override
				public void run() {
	
				}
			});
			}catch(Exception e){
				e.printStackTrace();
			}
	}
	
	public void detach(){
		Broadcaster.unregister(this);
		super.detach();
	}
}
