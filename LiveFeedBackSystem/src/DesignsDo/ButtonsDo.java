package DesignsDo;

import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import Frontend.*;
import Frontend.Broadcaster.BroadcastListener;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.themes.Reindeer;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;

import Backend.*;

public class ButtonsDo extends Panel implements BroadcastListener {

	
	/**
	 * 
	 */
	private static final long serialVersionUID = -7591737070748676844L;
	private MainUI main;
	
	public ButtonsDo(MainUI main) {
		Broadcaster.register(this);
		this.main=main;
		setSizeFull();
		setCaption("Buttons :");
		setContent(buildMainVertical());
			
			 
	}  

	private VerticalLayout buildMainVertical() {
		if (main.getVeranstaltung()==0){
			VerticalLayout mainVertical = new VerticalLayout();
			mainVertical.setImmediate(false);
			mainVertical.setSizeFull();
			mainVertical.setMargin(false);
			mainVertical.setSpacing(true);
			mainVertical.addComponent(new Label("Noch keine Veranstaltung"));
			return mainVertical;
		}else {
			
		// common part: create layout
		VerticalLayout mainVertical = new VerticalLayout();
		mainVertical.setImmediate(false);
		mainVertical.setSizeFull();
		mainVertical.setMargin(false);
		mainVertical.setSpacing(true);
		// lautHorizontal
		HorizontalLayout lautHorizontal = buildLautHorizontal();
		mainVertical.addComponent(lautHorizontal);
		
		// speedHorizontal
		HorizontalLayout speedHorizontal = buildSpeedHorizontal();
		mainVertical.addComponent(speedHorizontal);
		
		return mainVertical;
		}
	}

	@AutoGenerated
	private HorizontalLayout buildLautHorizontal() {
		// common part: create layout
		HorizontalLayout lautHorizontal = new HorizontalLayout();
		lautHorizontal.setImmediate(false);
		lautHorizontal.setSizeFull();
		lautHorizontal.setSpacing(true);
		lautHorizontal.setMargin(false);
		
		// lautstaerke
		Label lautstaerke = new Label();
		lautstaerke.setImmediate(false);
		Statement stm;
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
			final ArrayList <VolumeButton> volume= VolumeButton.selectFromId(stm, main.getVeranstaltung());
		
		
		lautstaerke.setValue(""+volume.size());
		lautHorizontal.addComponent(lautstaerke);
		lautHorizontal.setComponentAlignment(lautstaerke, new Alignment(6));
		
		// reset_Lautstaerke
		Button reset_Lautstaerke = new Button("reset", new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 4917058144797006894L;

			@Override
			public void buttonClick(ClickEvent event) {
				try {
					Statement stm = Backend.ConnectionManager.Instance.createStatement();

					for (int i=0;i<volume.size();i++){
						volume.get(i).delete(stm);
					}
					Broadcaster.broadcast("ButtonsResett");
				}
				catch (SQLException e) {
					Notification.show("Fehler beim Resetten");
					e.printStackTrace();
			
				}
			}
		});
		reset_Lautstaerke.addStyleName(Reindeer.BUTTON_LINK);
		reset_Lautstaerke.setIcon(new ThemeResource("Icons/Faenza/actions/22/bottom.png"));
		reset_Lautstaerke.setImmediate(false);

		lautHorizontal.addComponent(reset_Lautstaerke);
		
		return lautHorizontal;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return new HorizontalLayout();
	}

	@AutoGenerated
	private HorizontalLayout buildSpeedHorizontal() {
		// common part: create layout
		Statement stm;
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
			final ArrayList <SpeedButton> speed= SpeedButton.selectFromId(stm, main.getVeranstaltung());
		HorizontalLayout speedHorizontal = new HorizontalLayout();
		speedHorizontal.setImmediate(false);
		speedHorizontal.setSizeFull();
		speedHorizontal.setSpacing(true);
		speedHorizontal.setMargin(false);
	
		// speed
		Label speedLabel = new Label();
		speedLabel.setImmediate(false);
		//TODO vllt besser auslesen Lassen
		speedLabel.setValue("+: "+countSpeedPlus(speed)+"\n  -:"+countSpeedMinus(speed));
		speedHorizontal.addComponent(speedLabel);
		speedHorizontal.setComponentAlignment(speedLabel, new Alignment(6));
		speedLabel.setSizeFull();
		// reset_Speed
		Button reset_Speed = new Button("reset", new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = -1004079442311318240L;

			@Override
			public void buttonClick(ClickEvent event) {
				try {
					Statement stm = Backend.ConnectionManager.Instance.createStatement();

					for (int i=0;i<speed.size();i++){
						speed.get(i).delete(stm);
					}
					Broadcaster.broadcast("ButtonsResett");
				}
				catch (SQLException e) {
					Notification.show("Fehler beim Resetten");
					e.printStackTrace();
			
				}
				
			}
		});
		reset_Speed.addStyleName(Reindeer.BUTTON_LINK);
		reset_Speed.setIcon(new ThemeResource("Icons/Faenza/actions/22/bottom.png"));
		reset_Speed.setImmediate(false);

		speedHorizontal.addComponent(reset_Speed);
		
		return speedHorizontal;
		} catch (SQLException e) {
		e.printStackTrace();
		} 
		return new HorizontalLayout();
	}
	
	private int countSpeedPlus(ArrayList<SpeedButton> speed){
		int count=0;
		for (int i=0;i<speed.size();i++){
			if (speed.get(i).isIncremented()) count ++;
		}
		return count;
	}
	private int countSpeedMinus(ArrayList <SpeedButton> speed){
		int count=0;
		for (int i=0;i<speed.size();i++){
			if (!speed.get(i).isIncremented()) count ++;
		}
		return count;
	}
	public void receiveBroadcast(final String message) {
		try{
			main.access(new Runnable() {				
				@Override
				public void run() {
				//TODO push and cases to reload
					if(message.equals("Buttons") || message.equals("ButtonsResett")){
									setContent(buildMainVertical());
								
									
					}
				}});
			}catch(Exception e){ e.printStackTrace();}
	}
	
	public void detach(){
		Broadcaster.unregister(this);
		super.detach();
	}
	

}
