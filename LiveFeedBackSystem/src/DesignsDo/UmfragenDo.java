package DesignsDo;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

import Backend.Response;
import Backend.StudentResponse;
import Backend.Survey;
import Frontend.Broadcaster;
import Frontend.Broadcaster.BroadcastListener;
import Frontend.MainUI;

import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.server.FileResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Image;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

 

   
public class UmfragenDo extends Panel implements BroadcastListener{

	/**
	 * 
	 */
	private static final long serialVersionUID = -2748491632799133404L;
	private static MainUI main;
	private Window setVisibleWindow;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */  
	public UmfragenDo(MainUI main) {
		Broadcaster.register(this);
		UmfragenDo.main=main;
		setSizeFull();
		setCaption("Umfragen :");
		setContent(buildMainVerLayout());
		
		  
	}

	private VerticalLayout buildMainVerLayout() {
		if (main.getVeranstaltung()==0){
			VerticalLayout mainVertical = new VerticalLayout();
			mainVertical.setImmediate(false);
			mainVertical.setSizeFull();
			mainVertical.setMargin(false);
			mainVertical.setSpacing(true);
			mainVertical.addComponent(new Label("Noch keine Veranstaltung"));
			return mainVertical;
		}else {
		
		
		
		VerticalLayout mainVerLayout = new VerticalLayout();
		
		// common part: create layout
				
				mainVerLayout.setImmediate(false);
				mainVerLayout.setWidth("100.0%");
				mainVerLayout.setHeight("100.0%");
				mainVerLayout.setMargin(false);
				
			
				// newUmfrage
				Button newUmfrage = new Button(null, new Button.ClickListener() {
					
					/**
					 * 
					 */
					private static final long serialVersionUID = 8967432184952763330L;

					@Override
					public void buttonClick(ClickEvent event) {
						main.addWindow(createUmfragenWindow());
					}
				});
				newUmfrage.addStyleName(Reindeer.BUTTON_LINK);
				newUmfrage.setIcon(new ThemeResource("Icons/Faenza/actions/22/add.png"));
				newUmfrage.setImmediate(false);
				mainVerLayout.addComponent(newUmfrage);
				
				// umfragenPanel
				Panel umfragenPanel = buildUmfragenPanel();
				mainVerLayout.addComponent(umfragenPanel);
				mainVerLayout.setExpandRatio(umfragenPanel, 1.0f);
		
		
		
		return mainVerLayout;
		}
	}
	
	private Panel buildUmfragenPanel() {
		// common part: create layout
		Panel umfragenPanel = new Panel();
		umfragenPanel.setImmediate(false);
		umfragenPanel.setSizeFull();
		
		// verticalUmfragen
		VerticalLayout verticalUmfragen = new VerticalLayout();
		verticalUmfragen.setImmediate(false);
		verticalUmfragen.setSizeFull();
		verticalUmfragen.setMargin(false);
		Panel [] panels=buildPanels();
		for (int i=0;i<panels.length;i++){
			verticalUmfragen.addComponent(panels[i]);
			
		}
		umfragenPanel.setContent(verticalUmfragen);
		
		return umfragenPanel;
	}
	
	private Panel[] buildPanels(){
		
		Panel[] panels = null;
		final Statement stm;
		
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
			final ArrayList<Survey> surveyList = Survey.selectSurveysFromLecture(stm, main.getVeranstaltung());
			panels = new Panel[surveyList.size()];
		
			for (int j=0;j<surveyList.size();j++){
				final Survey survey = surveyList.get(j);
				HorizontalLayout layout = new HorizontalLayout();
				layout.setSizeFull();
				Label frage = new Label(survey.getText());
				
				
				Button setVisible= new Button(null, new Button.ClickListener() {

					private static final long serialVersionUID = 8956099376741180387L;
	
					@Override
					public void buttonClick(ClickEvent event) { 
						if (noVisible(surveyList,survey)) main.addWindow(buildSetVisibleWindow(survey.getId()));
						else Notification.show("Es ist bereits eine visible! Erst invisble setzen!");
					}
				});
				setVisible.addStyleName(Reindeer.BUTTON_LINK);
				setVisible.setIcon(new ThemeResource("Icons/Faenza/emblems/22/emblem-people.png"));
			
			Button bearbeiten = new Button(null, new Button.ClickListener() {

				private static final long serialVersionUID = 878561260278666359L;

				@Override
				public void buttonClick(ClickEvent event) {
					main.addWindow(buildEditWindow(survey.getId()));
				}
			});
			bearbeiten.addStyleName(Reindeer.BUTTON_LINK);
			bearbeiten.setIcon(new ThemeResource("Icons/Faenza/actions/22/gtk-edit.png"));
			
			Button auswerten = new Button(null, new Button.ClickListener() {
				
				private static final long serialVersionUID = 8031324310185206187L;

				@Override
				public void buttonClick(ClickEvent event) {
					main.addWindow(seeResultsWindow(survey.getId()));
				}
			});
			auswerten.addStyleName(Reindeer.BUTTON_LINK);
			auswerten.setIcon(new ThemeResource("Icons/Faenza/actions/22/visualization.png"));
			Button loeschen = new Button(null, new Button.ClickListener() {
				
				private static final long serialVersionUID = -8348847466420308393L;

				@Override
				public void buttonClick(ClickEvent event) {
					if (survey.getVisible()) Notification.show("Sichtbare Umfragen sind nicht loeschbar!");
					else{
					main.addWindow(buildDeleteWindow(survey.getId()));
					}
				}
			});
			Image visible = new Image();
			if (!survey.getVisible()){
				visible.setSource(new ThemeResource("Icons/Faenza/actions/24/lock.png"));
			}
		
			
			
			loeschen.addStyleName(Reindeer.BUTTON_LINK);
			loeschen.setIcon(new ThemeResource("Icons/Faenza/actions/22/remove.png"));
			//untere Buttons 
			HorizontalLayout horizontalButtonsBot = new HorizontalLayout();
//			horizontalButtonsBot.setSizeFull();
			horizontalButtonsBot.setSpacing(true);
			horizontalButtonsBot.addComponent(setVisible);
			horizontalButtonsBot.addComponent(auswerten);
			//alle Buttons
			//obere Buttons
			HorizontalLayout horizontalButtonsTop= new HorizontalLayout();
//			horizontalButtonsTop.setSizeFull();
			horizontalButtonsTop.setSpacing(true);
			horizontalButtonsTop.addComponent(bearbeiten);
			horizontalButtonsTop.addComponent(loeschen);
			
			
			VerticalLayout verticalButtons = new VerticalLayout();
			verticalButtons.setSizeFull();
			verticalButtons.setSpacing(true);
			verticalButtons.addComponent(horizontalButtonsTop);
			verticalButtons.addComponent(horizontalButtonsBot);
			
			//alles
			layout.addComponent(frage);
			layout.addComponent(verticalButtons);
			layout.addComponent(visible);
		//	layout.setExpandRatio(visibleLabel, 0.5f);
			layout.setExpandRatio(frage, 4.5f);
			layout.setExpandRatio(verticalButtons, 1f);
			Panel buffer = new Panel();
			buffer.setWidth("100%");
			buffer.setHeight("80px");
			buffer.setContent(layout);
			panels[j]=buffer;
		}
			}catch(Exception e){ 
				e.printStackTrace();
				}

		return panels;
	}
	
	private Window buildSetVisibleWindow(final int i){
		try {
			final Statement stm = Backend.ConnectionManager.Instance.createStatement();
			final Survey surv = Survey.select(stm, i);
			if (surv.getVisible()) {
				setVisibleWindow = new Window("Wirklich unsichtbar setzen?");
			}else {
				setVisibleWindow = new Window("Wirklich sichtbar setzen?");
			}
		setVisibleWindow.setModal(true);
		setVisibleWindow.setClosable(true);
		setVisibleWindow.setWidth("300px");
		setVisibleWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);

		Button setVisibleButton = new Button("JA!");
		setVisibleButton.setClickShortcut(KeyCode.ENTER);
		setVisibleButton.addClickListener(new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 6048454364487381259L;

			@Override
			public void buttonClick(ClickEvent event) {
				if (surv.getVisible()){
					surv.setVisible(false);
					Statement stm2;
					try {
						stm2 = Backend.ConnectionManager.Instance.createStatement();
						surv.updateSurvey(stm2);
						setVisibleWindow.close();;
						Broadcaster.broadcast("visibleSurvey");
					} catch (SQLException e) {
						e.printStackTrace();
					}
				}else {
					surv.setVisible(true);
					Statement stm2;
					try {
						stm2 = Backend.ConnectionManager.Instance.createStatement();
						surv.updateSurvey(stm2);
						setVisibleWindow.close();;
						Broadcaster.broadcast("visibleSurvey");
					} catch (SQLException e) {
						e.printStackTrace();
					}
				}
			}
		});
		
		Button notSetVisibleButton = new Button("NEIN!");
		notSetVisibleButton.addClickListener(new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 6068307482053898898L;

			@Override
			public void buttonClick(ClickEvent event) {
				setVisibleWindow.close();
			}
		});
		HorizontalLayout horizontalButtons = new HorizontalLayout();
		horizontalButtons.setWidth("280px");
		horizontalButtons.setSpacing(true);
		horizontalButtons.addComponent(notSetVisibleButton);
		horizontalButtons.addComponent(setVisibleButton);
		horizontalButtons.setComponentAlignment(notSetVisibleButton, Alignment.TOP_CENTER);
		horizontalButtons.setComponentAlignment(setVisibleButton, Alignment.TOP_CENTER);
		setVisibleWindow.setContent(vertLay);
		vertLay.addComponent(horizontalButtons);
		setVisibleWindow.center();
	} catch (SQLException e) {
		e.printStackTrace();
	}
		return setVisibleWindow;
	}
		
	private Window buildEditWindow(final int j){
		final Window editWindow = new Window("Bearbeiten");
		editWindow.setModal(true);
		editWindow.setClosable(true);
		editWindow.setWidth("600px");
		editWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);
		
		final TextField question = new TextField("Frage");
		final TextField []answer=new TextField[4];
		Statement stm;
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
			Survey survey = Survey.select(stm, j);
			question.setValue(survey.getText());
			question.setWidth("460px");
			vertLay.addComponent(question);
			stm = Backend.ConnectionManager.Instance.createStatement();
			ArrayList<Response> responses = Response.selectFromSurvey(stm, j);
			for (int i = 0; i < 4; i++) {
				answer[i]=new TextField("AntwortText"+(i+1));
				answer[i].setWidth("400px");
				answer[i].setValue(responses.get(i).getText());
				vertLay.addComponent(answer[i]);
				vertLay.setComponentAlignment(answer[i], Alignment.TOP_RIGHT);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		Button editButton = new Button("OK!");
		editButton.setClickShortcut(KeyCode.ENTER);
		editButton.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = -4518919853012177084L;

			@Override
			public void buttonClick(ClickEvent event) {
				Statement stm;
				try {
					stm = Backend.ConnectionManager.Instance.createStatement();
					Survey survey = Survey.select(stm, j);
					survey.setText(question.getValue());
					survey.updateSurvey(stm);
					stm = Backend.ConnectionManager.Instance.createStatement();
					ArrayList<Response> response = Response.selectFromSurvey(stm, j);

					for (int i = 0; i < 4; i++) {
						System.out.println("Survey edit "+i);
						stm = Backend.ConnectionManager.Instance.createStatement();
						response.get(i).setText(answer[i].getValue());
						response.get(i).update(stm);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
				editWindow.close();	
				Broadcaster.broadcast("Survey");
				
			}
		});
		Button abbruchButton = new Button("Abbrechen!", new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = -4318998089101120646L;

			@Override
			public void buttonClick(ClickEvent event) {
				editWindow.close();
				
			}
		});
		HorizontalLayout buttons = new HorizontalLayout();
		buttons.setHeight("100%");
		buttons.setWidth("500px");
		buttons.setSpacing(true);
		buttons.addComponent(abbruchButton);
		buttons.addComponent(editButton);
		buttons.setComponentAlignment(abbruchButton, Alignment.MIDDLE_CENTER);
		buttons.setComponentAlignment(editButton, Alignment.MIDDLE_CENTER);
		
		editWindow.setContent(vertLay);
		vertLay.addComponent(buttons);
		vertLay.setComponentAlignment(question, Alignment.MIDDLE_CENTER);
		vertLay.setComponentAlignment(buttons, Alignment.TOP_CENTER);
		editWindow.center();
		return editWindow;
		
	}
	
	private Window buildDeleteWindow(final int i){
		final Window deleteWindow = new Window("Wirklich loeschen?");
		deleteWindow.setModal(true);
		deleteWindow.setClosable(true);
		deleteWindow.setWidth("220px");
		deleteWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);

		Button loeschenButton = new Button("JA!");

		loeschenButton.setClickShortcut(KeyCode.ENTER);
		loeschenButton.addClickListener(new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 8804019072686346396L;

			@Override
			public void buttonClick(ClickEvent event) {
				try {
					Statement stm = Backend.ConnectionManager.Instance.createStatement();
					Survey.deleteID(stm, i);
				} catch (SQLException e) {
					e.printStackTrace();
				}
				deleteWindow.close();;
				Broadcaster.broadcast("Survey");
				
			}
		});
		Button notLoeschenButton = new Button("NEIN!");
		notLoeschenButton.addClickListener(new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 4991527018912911397L;

			@Override
			public void buttonClick(ClickEvent event) {
				deleteWindow.close();
			}
		});
		HorizontalLayout horizontalButtons = new HorizontalLayout();
		horizontalButtons.setWidth("200px");
		horizontalButtons.setSpacing(true);
		horizontalButtons.addComponent(notLoeschenButton);
		horizontalButtons.addComponent(loeschenButton);
		horizontalButtons.setComponentAlignment(notLoeschenButton, Alignment.TOP_CENTER);
		horizontalButtons.setComponentAlignment(loeschenButton, Alignment.TOP_CENTER);
		deleteWindow.setContent(vertLay);
		vertLay.addComponent(horizontalButtons);
		deleteWindow.center();
		return deleteWindow;
	}
	
	private Window seeResultsWindow(final int i){
		Statement stm;
		try {
		final Window resultWindow = new Window("Ergebnis");
		resultWindow.setModal(true);
		resultWindow.setClosable(true);
		resultWindow.setWidth("510px");
		resultWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);
		
		stm = Backend.ConnectionManager.Instance.createStatement();
		Survey surv = Survey.select(stm, i);
		
		final String chartLocation=buildChart(surv);
		FileResource fr= new FileResource(new File(System.getProperty("user.dir")+"/"+chartLocation));
		Image chart= new Image("",fr);
		vertLay.addComponent(chart);

		
		Button resultButton = new Button("Genug gesehen");
		resultButton.setClickShortcut(KeyCode.ENTER);
		resultButton.addClickListener(new Button.ClickListener() {	
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 7492886911913615329L;
			
			@Override
			public void buttonClick(ClickEvent event) {
				File file = new File(System.getProperty("user.dir")+"/"+chartLocation);
				file.delete();
				resultWindow.close();
				
			}
		});
		
		resultWindow.setContent(vertLay);
		vertLay.addComponent(resultButton);
		vertLay.setComponentAlignment(resultButton, Alignment.TOP_CENTER);
		resultWindow.center();
		return resultWindow;
		} catch (SQLException e) {
			e.printStackTrace();
		} 
		return new Window();
	}
	
	private Window createUmfragenWindow(){
		final Window createWindow = new Window("Neue Umfrage erstellen");
		createWindow.setModal(true);
		createWindow.setClosable(true);
		createWindow.setWidth("600px");
		createWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);
		final TextField question = new TextField("Frage");
		question.setWidth("460px");
		createWindow.setContent(vertLay);
		vertLay.addComponent(question);
		vertLay.setComponentAlignment(question, Alignment.MIDDLE_CENTER);
		
		final TextField answer1 = new TextField("Antwort 1");
		answer1.setWidth("400px");
		vertLay.addComponent(answer1);
		vertLay.setComponentAlignment(answer1, Alignment.TOP_RIGHT);
		
		final TextField answer2 = new TextField("Antwort 2");
		answer2.setWidth("400px");
		vertLay.addComponent(answer2);
		vertLay.setComponentAlignment(answer2, Alignment.TOP_RIGHT);
		
		final TextField answer3 = new TextField("Antwort 3");
		answer3.setWidth("400px");
		vertLay.addComponent(answer3);
		vertLay.setComponentAlignment(answer3, Alignment.TOP_RIGHT);
		
		final TextField answer4 = new TextField("Antwort 4");
		answer4.setWidth("400px");
		vertLay.addComponent(answer4);
		vertLay.setComponentAlignment(answer4, Alignment.TOP_RIGHT);
		
		Button submit = new Button("Submit");
		submit.addClickListener(new Button.ClickListener() {
			
			private static final long serialVersionUID = 28705623775388525L;

			@Override
			public void buttonClick(ClickEvent event) {
				Statement stm;
				try {
					stm = Backend.ConnectionManager.Instance.createStatement();
					Date date = new Date();
					Survey survey = new Survey(question.getValue(), false, date, main.getVeranstaltung());
					survey.insert(stm);
					
					int surveyID = getSurveyId(question.getValue());
					
					Response response1 = new Response(surveyID, answer1.getValue(), 1, false);
					response1.insert(stm);
					
					Response response2 = new Response(surveyID, answer2.getValue(), 2, false);
					response2.insert(stm);
					
					Response response3 = new Response(surveyID, answer3.getValue(), 3, false);
					response3.insert(stm);
					
					Response response4 = new Response(surveyID, answer4.getValue(), 4, false);
					response4.insert(stm);
					
					Broadcaster.broadcast("Survey");
					createWindow.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		Button abbruchButton = new Button("Abbrechen!", new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 7662054273707336355L;

			@Override
			public void buttonClick(ClickEvent event) {
				createWindow.close();
				
			}
		});
		HorizontalLayout buttons = new HorizontalLayout(); 
		buttons.setHeight("100%");
		buttons.setWidth("500px");
		buttons.setSpacing(true);
		buttons.addComponent(abbruchButton);
		buttons.addComponent(submit);
		buttons.setComponentAlignment(abbruchButton, Alignment.MIDDLE_CENTER);
		buttons.setComponentAlignment(submit, Alignment.MIDDLE_CENTER);
		vertLay.addComponent(buttons);
		vertLay.setComponentAlignment(question, Alignment.TOP_CENTER);
		vertLay.setComponentAlignment(buttons, Alignment.TOP_CENTER);
		return createWindow;
	}
	
	public void receiveBroadcast(final String message) {
		try{
			main.access(new Runnable() {				
				@Override
				public void run() {
				
					if(message.equals("Survey") || message.equals("visibleSurvey")){
									setContent(buildMainVerLayout());
									
									
					}
				}});
			}catch(Exception e){ e.printStackTrace();}
	}
	
	public void detach(){
		Broadcaster.unregister(this);
		super.detach();
	}

	public int getSurveyId(String question){
		Statement stm;
		int ret=0;
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
			ArrayList<Survey> surveyList = Survey.selectSurveysFromLecture(stm, main.getVeranstaltung());
			for(int i=0;i<surveyList.size();i++){
				if (surveyList.get(i).getText().equals(question)){
					ret=surveyList.get(i).getId();
					return ret;
				}
			}
	}catch(Exception e){
		e.printStackTrace();
	}
		return -1;
	}

	 public static String buildChart(Survey surv) {
		 
		 	Statement stm;
			try {
				stm = Backend.ConnectionManager.Instance.createStatement();
				StudentResponse sr1 = new StudentResponse(" ", surv.getId(), 1);
				int a1=sr1.surveyChoiceCounter(stm);
		 
				stm = Backend.ConnectionManager.Instance.createStatement();
				StudentResponse sr2 = new StudentResponse(" ", surv.getId(), 2);
				int a2=sr2.surveyChoiceCounter(stm);
				
				stm = Backend.ConnectionManager.Instance.createStatement();
				StudentResponse sr3 = new StudentResponse(" ", surv.getId(), 3);
				int a3=sr3.surveyChoiceCounter(stm);
				
				stm = Backend.ConnectionManager.Instance.createStatement();
				StudentResponse sr4 = new StudentResponse(" ", surv.getId(), 4);
				int a4=sr4.surveyChoiceCounter(stm);
				
				stm = Backend.ConnectionManager.Instance.createStatement();
				final ArrayList<Response> responses= Response.selectFromSurvey(stm, surv.getId());
				// Create a simple Bar chart
				DefaultCategoryDataset dataset = new DefaultCategoryDataset();
				dataset.setValue(a1, responses.get(0).getText(),responses.get(0).getText());
				dataset.setValue(a2, responses.get(1).getText(),responses.get(1).getText());
				dataset.setValue(a3, responses.get(2).getText(),responses.get(2).getText());
				dataset.setValue(a4, responses.get(3).getText(),responses.get(3).getText());
				stm = Backend.ConnectionManager.Instance.createStatement();
				JFreeChart chart = ChartFactory.createBarChart(surv.getText()+"\nTeilnehmer: "+sr4.surveyCounter(stm, surv.getId()),
						"Antwort", "Antwortenzahl", dataset, PlotOrientation.VERTICAL,
						false, true, false);
				try {
					SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
					String themeAdd=main.getVeranstaltung()+"_Surv_"+surv.getId()+"_"+df.format((new Date()))+".jpg";
					
					File chartF = new File(System.getProperty("user.dir")+"/"+themeAdd);
					FileOutputStream chartS =new FileOutputStream(chartF, false);
					ChartUtilities.writeChartAsJPEG(chartS, chart, 500, 300);
					chartS.close();
					return themeAdd;
				} catch (IOException e) {
					System.err.println("Problem occurred creating chart.");
					e.printStackTrace();
				}
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			return null;
	}
	
	 private boolean noVisible(ArrayList<Survey> surveys,Survey surv){
		 for (int i=0;i<surveys.size();i++){
			 if (surveys.get(i)!=surv && surveys.get(i).getVisible()) return false;
		 }
		 return true;
	 }
	
	
}
