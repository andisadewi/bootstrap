package Frontend;

import java.io.File;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import Backend.Lecture;
import Backend.Question;
import Backend.Response;
import Backend.Rights;
import Backend.Rights_Roles;
import Backend.Roles;
import Backend.Survey;
import Backend.User;
import Backend.Voting;
import Designs.BannerTop;
import DesignsDo.ButtonsDo;
import DesignsDo.FragenDo;
import DesignsDo.UmfragenDo;
import DesignsStu.ButtonsStu;
import DesignsStu.FragenStu;
import DesignsStu.UmfragenStu;
import Frontend.Broadcaster.BroadcastListener;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.PreserveOnRefresh;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FileDownloader;
import com.vaadin.server.FileResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

@PreserveOnRefresh
public class Admin extends CustomComponent implements View , BroadcastListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4676174732903648477L;
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	//generell
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	private VerticalLayout mainVertical;
	private MainUI main;
	//banner
	private BannerTop banner;
	//unter banner
	private TabSheet tabSheetLeft;
	private VerticalLayout rollenverwaltungLay;
	private Window editRolleWin; 
	private Button searchBenutzer;
	private HorizontalLayout studentView;
	private HorizontalLayout dozentView;
	private User user; 
	private	Table rollenTable = new Table();
	private VerticalLayout studentTab;
	private VerticalLayout dozentTab; 
	private Panel veranstaltungsTab;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	public Admin(MainUI main) {
		this.main=main;
		
	}

	@Override
	public void enter(ViewChangeEvent event) {
		Broadcaster.register(this);
		if (main.getLoggedInUser()==null) main.getNavigator().navigateTo(MainUI.LOGIN);
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
	}
 
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("100%");
	//	mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		// mainVertical
		mainVertical = buildmainVertical();
		mainLayout.addComponent(mainVertical, "top:0.0px;left:0.0px;right:-2.0px;bottom:-2.0px");
		
		return mainLayout;
	}
	private VerticalLayout buildmainVertical() {
		// common part: create layout
		mainVertical = new VerticalLayout();
		mainVertical.setImmediate(true);
		mainVertical.setWidth("100.0%");
		mainVertical.setHeight("100.0%");
		mainVertical.setMargin(false);
		
		// bannerHorizontal
		banner = new BannerTop(main);
		tabSheetLeft = buildTabSheetLeft();
		mainVertical.addComponent(banner);
		mainVertical.addComponent(tabSheetLeft);
		mainVertical.setExpandRatio(tabSheetLeft, 8.0f);
		return mainVertical;
	}
	
	private TabSheet buildTabSheetLeft() {
		// common part: create layout
				tabSheetLeft = new TabSheet();
				tabSheetLeft.setSizeFull();
				tabSheetLeft.setImmediate(true);
				VerticalLayout adminTab = buildAdminTab();
				veranstaltungsTab=buildVeranstaltungsTab();
				studentTab = buildStudentTab();
				dozentTab = buildDozentTab();
				
				tabSheetLeft.addTab(adminTab);
				tabSheetLeft.addTab(veranstaltungsTab);
				tabSheetLeft.addTab(studentTab);
				tabSheetLeft.addTab(dozentTab);
				tabSheetLeft.getTab(veranstaltungsTab).setCaption("Veranstaltungen");
				if (main.getVeranstaltung()==0){
					tabSheetLeft.getTab(studentTab).setVisible(false);
					tabSheetLeft.getTab(dozentTab).setVisible(false);
				}
				
				return tabSheetLeft;
	}
	
	

	
	private VerticalLayout buildAdminTab(){
		VerticalLayout adminTab = new VerticalLayout();
		HorizontalLayout adminHor = new HorizontalLayout();
		VerticalLayout adminVert = new VerticalLayout();
		adminHor.setSizeFull();
		adminHor.setSpacing(true);
		adminTab.setSizeFull();
		adminTab.setSpacing(true);
		adminVert.setSizeFull();
		adminVert.setSpacing(true);
		adminTab.setCaption("AdminVerwaltung");
		rollenverwaltungLay = buildRollenverwaltung();
		searchBenutzer = buildBenutzerverwaltung();
		Button newRolle = newRolleButton();
		Button Download = buildDownloadButton();
		adminTab.addComponent(adminHor);
		adminHor.addComponent(rollenverwaltungLay);
		adminHor.addComponent(adminVert);
		adminVert.addComponent(searchBenutzer);
		adminVert.addComponent(newRolle);
		adminVert.addComponent(Download);
		adminHor.setComponentAlignment(rollenverwaltungLay, Alignment.MIDDLE_CENTER);
		adminVert.setComponentAlignment(searchBenutzer, Alignment.MIDDLE_LEFT);
		adminVert.setComponentAlignment(newRolle, Alignment.MIDDLE_LEFT);
		adminVert.setComponentAlignment(Download, Alignment.MIDDLE_LEFT);
		adminVert.setExpandRatio(newRolle, 1.0f);
		adminVert.setExpandRatio(searchBenutzer, 1.0f);
		adminVert.setExpandRatio(Download, 1.0f);
		adminHor.setExpandRatio(adminVert, 1.0f);
		adminHor.setExpandRatio(rollenverwaltungLay, 3f);
		return adminTab;
		
		
	}
	
	private VerticalLayout buildDozentTab(){
		VerticalLayout dozentTab = new VerticalLayout();
		dozentTab.setSizeFull();
		dozentTab.setSpacing(true);
		dozentTab.setCaption("Dozent fuer : "+main.getVeranstaltung());
	
	
			dozentView = buildDozentView();
			dozentTab.addComponent(dozentView);
			dozentTab.setComponentAlignment(dozentView, Alignment.TOP_CENTER);
			dozentTab.setExpandRatio(dozentView, 8.0f);
			

		return dozentTab;
	}
	private VerticalLayout buildStudentTab(){
		VerticalLayout studentTab = new VerticalLayout();
		studentTab.setSizeFull();
		studentTab.setSpacing(true);
		studentTab.setCaption("Student fuer : "+main.getVeranstaltung());
		
			studentView = buildStudentView();
			studentTab.addComponent(studentView);
			studentTab.setComponentAlignment(studentView, Alignment.TOP_CENTER);
			studentTab.setExpandRatio(studentView, 8.0f);
		
			
		
		return studentTab;
	}
	
	
	private VerticalLayout buildRollenverwaltung(){
		rollenverwaltungLay = new VerticalLayout();
		rollenverwaltungLay.setSizeFull();
		rollenverwaltungLay.setSpacing(true);
		
		rollenTable.setSelectable(true);
		rollenTable.setImmediate(true);
		rollenTable.setSizeFull();
		rollenTable.addContainerProperty("Rolle", String.class, null);
		rollenTable.addContainerProperty("Rechte", String.class, null);
		try {
			Statement stm = Backend.ConnectionManager.Instance.createStatement();
			ArrayList<Roles> roles = Roles.select(stm);
		
			for (int i = 0; i < roles.size(); i++) {
				ArrayList<Rights> rights = Rights.selectRights(stm, roles.get(i).getroleID());
				String rightsDisc = "";
						for (int j = 0; j < rights.size(); j++) {
							rightsDisc = rightsDisc + "; " + rights.get(j).getDiscription();
						}
						
			rollenTable.addItem(new Object[] {roles.get(i).getroleName(), rightsDisc}, roles.get(i).getroleID());
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
			

		
		rollenTable.addItemClickListener(new ItemClickListener() {
			
	
			private static final long serialVersionUID = -350941722013989394L;

			@Override
			public void itemClick(ItemClickEvent event) {
				editRolleWin = buildEditRolle((String) event.getItem().getItemProperty("Rolle").getValue(), (int) event.getItemId());
				UI.getCurrent().addWindow(editRolleWin);
			}
		}); 
		rollenverwaltungLay.addComponent(rollenTable);
		rollenverwaltungLay.setComponentAlignment(rollenTable, Alignment.TOP_CENTER);
		
		
		
		return rollenverwaltungLay;
		
	
	}
	
	private Button newRolleButton(){
		Button newRolle = new Button("new role");
		newRolle.addStyleName(Reindeer.BUTTON_LINK);
		newRolle.setIcon(new ThemeResource("Icons/Faenza/emblems/48/emblem-personal.png"));
		newRolle.addClickListener(new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 4329327018431018051L;

			@Override
			public void buttonClick(ClickEvent event) {
				Window newRolle=buildNewRolle();
				UI.getCurrent().addWindow(newRolle);
				
			}
		});
	return newRolle;
	}
	
	
	private Window buildNewRolle(){
		final Window newRolleWin = new Window("Rolle bearbeiten");
		newRolleWin.setWidth("650px");
		newRolleWin.addStyleName(Reindeer.WINDOW_LIGHT);
		newRolleWin.center();
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);
		vertLay.setWidth("100%");
		HorizontalLayout horLay = new HorizontalLayout();
		horLay.setSpacing(true);
		horLay.setWidth("100%");
		VerticalLayout vertLay2 = new VerticalLayout();
		vertLay2.setSpacing(true);
		vertLay2.setWidth("100%");
		VerticalLayout vertLay3 = new VerticalLayout();
		vertLay3.setSpacing(true);
		vertLay3.setWidth("100%");
		newRolleWin.setContent(vertLay);
		vertLay.addComponent(horLay);
		horLay.addComponent(vertLay2);
		horLay.addComponent(vertLay3);
		
		final CheckBox[] check = new CheckBox[10];
		check[0] = new CheckBox("BenutzerVerwaltung");
		check[1] = new CheckBox("RechteVerwaltung");
		check[2] = new CheckBox("VeranstaltungErstellen");
		check[3] = new CheckBox("UmfragenErstellen");
		check[4] = new CheckBox("FragenBeantworten");
		check[5] = new CheckBox("ButtonsAuslesen");
		check[6] = new CheckBox("VeranstaltungHoeren");
		check[7] = new CheckBox("UmfragenBeantworten");
		check[8] = new CheckBox("FragenStellen");
		check[9] = new CheckBox("ButtonsDruecken");
		
		final TextField rolle = new TextField("RollenName");
		final TextField id	= new TextField("RollenId");

		horLay.addComponent(rolle);
		horLay.addComponent(id);
		for (int i = 0; i < 5; i++) {
			vertLay2.addComponent(check[i]);
		}
		for (int i = 0; i < 5; i++) {
			vertLay3.addComponent(check[i+5]);
		}
		
		Button submit = new Button("submit");
		submit.setClickShortcut(KeyCode.ENTER);
		submit.addClickListener(new Button.ClickListener() {
			

			private static final long serialVersionUID = -582465453029665903L;

			@Override
			public void buttonClick(ClickEvent event) {
				try {
					Statement stm = Backend.ConnectionManager.Instance.createStatement();
					Roles.insertStatic(stm, Integer.parseInt(id.getValue()), rolle.getValue());
					for (int i = 0; i < check.length; i++) {
						if(check[i].getValue()){
							Rights_Roles.insertStatic(stm, Integer.parseInt(id.getValue()),i);
						}
					}
				}catch(Exception e){e.printStackTrace();}
			newRolleWin.close();
			}});
		vertLay.addComponent(submit);
		vertLay.setComponentAlignment(submit, Alignment.BOTTOM_RIGHT);
		return newRolleWin;
		}
	
	private Window buildEditRolle(String rolle1, final int id){
		editRolleWin = new Window("Rolle bearbeiten");
		editRolleWin.setWidth("500px");
		editRolleWin.addStyleName(Reindeer.WINDOW_LIGHT);
		editRolleWin.center();
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);
		vertLay.setWidth("100%");
		HorizontalLayout horLay = new HorizontalLayout();
		horLay.setSpacing(true);
		horLay.setWidth("100%");
		VerticalLayout vertLay2 = new VerticalLayout();
		vertLay2.setSpacing(true);
		vertLay2.setWidth("100%");
		VerticalLayout vertLay3 = new VerticalLayout();
		vertLay3.setSpacing(true);
		vertLay3.setWidth("100%");
		editRolleWin.setContent(vertLay);
		vertLay.addComponent(horLay);
		horLay.addComponent(vertLay2);
		horLay.addComponent(vertLay3);
		
		final CheckBox[] check = new CheckBox[10];
		check[0] = new CheckBox("BenutzerVerwaltung");
		check[1] = new CheckBox("RechteVerwaltung");
		check[2] = new CheckBox("VeranstaltungErstellen");
		check[3] = new CheckBox("UmfragenErstellen");
		check[4] = new CheckBox("FragenBeantworten");
		check[5] = new CheckBox("ButtonsAuslesen");
		check[6] = new CheckBox("VeranstaltungHoeren");
		check[7] = new CheckBox("UmfragenBeantworten");
		check[8] = new CheckBox("FragenStellen");
		check[9] = new CheckBox("ButtonsDruecken");
		
		
		try {
			Statement stm = Backend.ConnectionManager.Instance.createStatement();
			ArrayList<Rights> rights = Rights.selectRights(stm, id);
			for (int i = 0; i < rights.size(); i++) {
				for (int j = 0; j < check.length; j++) {
					if (rights.get(i).getDiscription().equals(check[j].getCaption())) {
						check[j].setValue(true);
					}
				}
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		
		final TextField rolle = new TextField();

		rolle.setValue(rolle1);
		

		
		horLay.addComponent(rolle);
		for (int i = 0; i < 5; i++) {
			vertLay2.addComponent(check[i]);
		}
		for (int i = 0; i < 5; i++) {
			vertLay3.addComponent(check[i+5]);
		}
		
		Button submit = new Button("submit");
		submit.setClickShortcut(KeyCode.ENTER);
		submit.addClickListener(new Button.ClickListener() {
			

			private static final long serialVersionUID = -582465453029665903L;

			@SuppressWarnings("unchecked")
			@Override
			public void buttonClick(ClickEvent event) {
				rollenTable.getItem(id).getItemProperty("Rolle").setValue(rolle.getValue());
				try {
					Statement stm = Backend.ConnectionManager.Instance.createStatement();
					Roles.updateStatic(stm, id, rolle.getValue());
				
					ArrayList<Rights> rights = Rights.selectRights(stm, id);
					for (int i = 0; i < check.length; i++) {
						boolean checked=false;
						if(check[i].getValue()){
							for (int j = 0; j < rights.size(); j++) {
								if (check[i].getCaption().equals(rights.get(j).getDiscription())) {
									rights.remove(j);
									checked=false;
									break;
								}else checked=true;
							}
							if (checked) {
								Rights_Roles.insertStatic(stm, id, i);
							}
						}
					}
					for (int i = 0; i < rights.size(); i++) {
						Rights_Roles.delete(stm, id, rights.get(i).getId());
					}

				editRolleWin.close();
				
				}catch(Exception e){
					e.printStackTrace();
					editRolleWin.close();}
		}});
		
		vertLay.addComponent(submit);
		vertLay.setComponentAlignment(submit, Alignment.BOTTOM_RIGHT);
		return editRolleWin;
	}
	
	private Button buildBenutzerverwaltung(){
		final Window searchBenutzerWin = new Window("Teilnehmerverwaltung");
		searchBenutzerWin.setWidth("500px");
		searchBenutzerWin.addStyleName(Reindeer.WINDOW_LIGHT);
		searchBenutzerWin.center();
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);
		vertLay.setWidth("100%");
		final TextField benutzer = new TextField("TuBit-Benutzername");
		benutzer.setWidth("100%");
		benutzer.focus();
		Button search = new Button("search");
		search.setClickShortcut(KeyCode.ENTER);
		search.addClickListener(new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = -7480100168843949525L;

			@Override
			public void buttonClick(ClickEvent event) {
				try{
					Statement stm = Backend.ConnectionManager.Instance.createStatement();
					user = User.select(stm, benutzer.getValue());
					Window editWindow = buildTeilnehmerverwaltung(user);
					main.addWindow(editWindow);
					
				} catch (Exception e) {
					Notification.show("Teilnehmer nicht vorhanden");
					e.printStackTrace();
				}
			}
		});
		
		searchBenutzerWin.setContent(vertLay);
		vertLay.addComponent(benutzer);
		vertLay.setComponentAlignment(benutzer, Alignment.MIDDLE_CENTER);
		vertLay.addComponent(search);
		vertLay.setComponentAlignment(search, Alignment.MIDDLE_RIGHT);
		vertLay.setExpandRatio(benutzer, 1.0f);
		
		Button searchBenutzer = new Button("Teilnehmerverwalten");	
		searchBenutzer.addStyleName(Reindeer.BUTTON_LINK);
		searchBenutzer.setIcon(new ThemeResource("Icons/Faenza/actions/48/edit-find-replace.png"));
		searchBenutzer.addClickListener(new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 7229988758324785423L;

			@Override
			public void buttonClick(ClickEvent event) {
				main.addWindow(searchBenutzerWin);
				
			}
		});
		return searchBenutzer;
	}

	private Window buildTeilnehmerverwaltung(final User user){
		final Window editWindow = new Window("Benutzer bearbeiten");
		editWindow.setWidth("500px");
		editWindow.setHeight("250px");
		editWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		editWindow.center();
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSizeFull();
		vertLay.setSpacing(true);
		HorizontalLayout horLay = new HorizontalLayout();
		horLay.setSizeFull();
		horLay.setSpacing(true);
		HorizontalLayout horLay2 = new HorizontalLayout();
		horLay2.setSizeFull();
		horLay2.setSpacing(true);
		
		final TextField tubitName = new TextField("tubitName");
		tubitName.setValue(user.getLoginName());
		final TextField rolle = new TextField("Rolle");
		Statement stm;
		try{
			stm = Backend.ConnectionManager.Instance.createStatement();
			rolle.setValue(User.selectRolle(stm, user.getLoginName()).getroleName());
			System.out.println(User.selectRolle(stm, user.getLoginName()).getroleName());
		}catch(Exception e2){ e2.printStackTrace();}
		Button submit = new Button("submit");
		submit.setClickShortcut(KeyCode.ENTER);
		submit.addClickListener(new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 3532061044989504627L;

			@Override
			public void buttonClick(ClickEvent event) {
				Statement stm;
				try {
					stm = Backend.ConnectionManager.Instance.createStatement();
					user.updateRolle(stm, Roles.selectRole(stm, rolle.getValue()).getroleID());
				} catch (SQLException e) {
					e.printStackTrace();
				}
				editWindow.close();
			}
		});
		
		Button delete = new Button("delete");
		delete.addClickListener(new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 7442065877192617644L;

			@Override
			public void buttonClick(ClickEvent event) {
				Statement stm;
				try {
					stm = Backend.ConnectionManager.Instance.createStatement();
					user.delete(stm);
				} catch (SQLException e) {
					e.printStackTrace();
				};;
				
			}
		});
		editWindow.setContent(vertLay);
		vertLay.addComponent(horLay);
		vertLay.addComponent(horLay2);
		horLay.addComponent(tubitName);
		horLay.addComponent(rolle);
		horLay2.addComponent(submit);
		horLay2.addComponent(delete);
		horLay2.setComponentAlignment(submit, Alignment.BOTTOM_RIGHT);
		horLay2.setComponentAlignment(delete, Alignment.BOTTOM_RIGHT);
		return editWindow;
	}
	private Button buildDownloadButton(){
		Button download = new Button ("Download");
		download.setStyleName(Reindeer.BUTTON_LINK);
		download.setIcon(new ThemeResource("Icons/Faenza/actions/48/go-down.png"));
		download.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				Window downwin = buildDownload();
				main.addWindow(downwin);
			}
		});
		return download;
	}
	private Window buildDownload(){
		Window logOut = new Window();
		logOut.center();
		logOut.addStyleName(Reindeer.WINDOW_LIGHT);
		logOut.setWidth("300px");
		logOut.setHeight("100px");
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSizeFull();
		HorizontalLayout horLay = new HorizontalLayout();
		horLay.setSizeFull();
		final TextField verID = new TextField("VeranstaltungsID");;

		final Button download2 = new Button("Download");
		download2.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					Statement stm = Backend.ConnectionManager.Instance.createStatement();
					ArrayList<Question> questions = Question.selectAll(stm, Integer.parseInt(verID.getValue()));
					PrintWriter out = new PrintWriter("Fragen.txt");
					for (int i = 0; i < questions.size(); i++) {
						out.println("Question " + (i+1) + ": " + questions.get(i).getText() + "		votes: " + Voting.selectFromID(stm, questions.get(i).getId()).size() + "\n");
					}
					ArrayList<Survey> surveys = Survey.selectSurveysFromLecture(stm, Integer.parseInt(verID.getValue()));
					for (int i = 0; i < surveys.size(); i++) {
						out.println("\n\n" + "Survey " + (i+1) + ": " + surveys.get(i).getText() + "\n");
					    stm = Backend.ConnectionManager.Instance.createStatement();
						ArrayList<String> responses = Response.selectResponsesText(stm, surveys.get(i).getId());
						for (int j = 0; j < responses.size(); j++) {
							out.println("	Response " + (j+1) + ": " + responses.get(j) + "\n");
						}
					}
					FileResource res = new FileResource(new File(System.getProperty("user.dir") + "/Fragen.txt"));
					FileDownloader fd = new FileDownloader(res);
					fd.extend(download2);
					Thread.sleep(200);
					Statement stm2;
					try {
						stm2 = Backend.ConnectionManager.Instance.createStatement();
						ArrayList<Survey> surveys2 = Survey.selectSurveysFromLecture(stm2, Integer.parseInt(verID.getValue()));
						for (int i = 0; i < surveys2.size(); i++) {
							File file = new File(System.getProperty("user.dir") + "/" + UmfragenDo.buildChart(surveys.get(i)));
							FileResource res2 = new FileResource(file);
							FileDownloader fd2 = new FileDownloader(res2);
							fd2.extend(download2);
						
							//file.delete();
							Thread.sleep(200);
						}out.close();
					} catch (SQLException e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				
			}
		});
		

		logOut.setContent(vertLay);
		vertLay.addComponent(horLay);
		horLay.addComponent(verID);
		horLay.setComponentAlignment(verID, Alignment.BOTTOM_CENTER);
		horLay.addComponent(download2);
		horLay.setComponentAlignment(download2, Alignment.BOTTOM_CENTER);
		return logOut;

	}
	private HorizontalLayout buildDozentView(){
		HorizontalLayout mainHorizontalLayout = new HorizontalLayout();
		mainHorizontalLayout.setWidth("100.0%");
		mainHorizontalLayout.setHeight("100.0%");
	
		UmfragenDo umfragen = new UmfragenDo(main);
		FragenDo fragen = new FragenDo(main);
		ButtonsDo buttons = new ButtonsDo(main);
		mainHorizontalLayout.addComponent(umfragen);
		mainHorizontalLayout.addComponent(fragen);
		mainHorizontalLayout.addComponent(buttons);		
  
		return mainHorizontalLayout;
		
		
		
	}
	
	private HorizontalLayout buildStudentView(){		
		HorizontalLayout mainHorizontalLayout = new HorizontalLayout();
		mainHorizontalLayout.setWidth("100.0%");
		mainHorizontalLayout.setHeight("100.0%");
	
		UmfragenStu umfragen = new UmfragenStu(main);
		FragenStu fragen = new FragenStu(main);
		ButtonsStu buttons = new ButtonsStu(main);
		mainHorizontalLayout.addComponent(umfragen);
		mainHorizontalLayout.addComponent(fragen);
		mainHorizontalLayout.addComponent(buttons);		
  
		return mainHorizontalLayout;
	
	}
	private Panel buildVeranstaltungsTab(){
		Panel veranstaltungsPanel=new Panel();
		veranstaltungsPanel.setSizeFull();
		VerticalLayout veranstaltungsTab=buildVeranstaltungsVertical();
		veranstaltungsPanel.setContent(veranstaltungsTab);
		return veranstaltungsPanel;
		
	}
	private VerticalLayout buildVeranstaltungsVertical(){
		VerticalLayout veranstaltungsTab= new VerticalLayout();
		veranstaltungsTab.setWidth("100%");
		veranstaltungsTab.setCaption("Veranstaltungen");
		veranstaltungsTab.setSpacing(true);
		Button neueVeranstaltung = new Button("add",
				new Button.ClickListener() {

					/**
					 * 
					 */
					private static final long serialVersionUID = 7705839100080824644L;

					@Override
					public void buttonClick(ClickEvent event) {
						main.addWindow(buildNewWindow());

					}
				});
		neueVeranstaltung.addStyleName(Reindeer.BUTTON_LINK);
		neueVeranstaltung.setIcon(new ThemeResource("Icons/Faenza/actions/24/list-add.png"));
		veranstaltungsTab.addComponent(neueVeranstaltung);
		Panel[] panels = buildPanels();
		for (int i = 0; i < panels.length; i++) {
			veranstaltungsTab.addComponent(panels[i]);
			veranstaltungsTab.setComponentAlignment(panels[i], Alignment.TOP_CENTER);
		}
		
		
		return veranstaltungsTab;
	}
	private Panel[] buildPanels() {
		

		Statement stm;
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();

			ArrayList<Lecture> lectureList = deleteOld(Lecture.select(stm));

			Panel[] panels = new Panel[lectureList.size()];

			// Panel [] panels = new Panel[2];

			for (int i = 0; i < panels.length; i++) {
				Lecture lecture = lectureList.get(i);
				panels[i] = new Panel(lecture.getId()+" : "+lecture.getName());
				panels[i].setWidth("650px");
//				panels[i].setHeight("140px");
				// Layout des Panels
				HorizontalLayout panelLayout = new HorizontalLayout();
				panelLayout.setSpacing(true);
				
				VerticalLayout buttonLayout = buildVerticalLayout(lecture.getId());
				// Informationen zur Veranstaltung
				Panel doName = new Panel("Dozent :");
				doName.setWidth("180px");
				doName.setContent(new Label(lecture.getProfessorID()));
				Panel raum = new Panel("RaumNr. :");
				raum.setWidth("180px");
				raum.setContent(new Label(lecture.getRoom()));
				Panel date = new Panel("Datum :");
				date.setWidth("180px");
				date.setContent(new Label(lecture.getDate().toString()));
				
				// zum Panel hinzufuegen
				panelLayout.addComponents(doName);
				panelLayout.addComponent(raum);
				panelLayout.addComponent(date);
				panelLayout.addComponent(buttonLayout);
				buttonLayout.setWidth("50px");
				panels[i].setContent(panelLayout);
			}
			System.out.println("veranstaltungen");
			stm.close();
			return panels;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return new Panel[0];
	}

	private VerticalLayout buildVerticalLayout(final int i) {
		VerticalLayout buttonLayout = new VerticalLayout();
		buttonLayout.setSpacing(true);
		// Button zum bearbeiten
		Button bearbeiten = new Button(null,
				new Button.ClickListener() {
					/**
					 * 
					 */
					private static final long serialVersionUID = 779739648897996485L;

					@Override
					public void buttonClick(ClickEvent event) {

						main.addWindow(buildEditLogInWindow(i));
					}
				});
		bearbeiten.addStyleName(Reindeer.BUTTON_LINK);
		bearbeiten.setIcon(new ThemeResource("Icons/Faenza/actions/22/gtk-edit.png"));
		bearbeiten.setWidth("50px");
		
		// Button zum einloggen um Vorlesung zu halten
		Button einloggen = new Button(null, new Button.ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = -9204367596937543288L;

			@Override
			public void buttonClick(ClickEvent event) {

				main.addWindow(buildLogInWindow(i));

			}
		});
		einloggen.addStyleName(Reindeer.BUTTON_LINK);
		einloggen.setIcon(new ThemeResource("Icons/Faenza/actions/22/forward.png"));
		einloggen.setWidth("50px");

		// Button zum loeschen
		Button loeschen = new Button(null, new Button.ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 6069760847979322903L;

			@Override
			public void buttonClick(ClickEvent event) {
				main.addWindow(buildDeleteWindow(i));

			}
		});
		loeschen.addStyleName(Reindeer.BUTTON_LINK);
		loeschen.setIcon(new ThemeResource("Icons/Faenza/actions/22/remove.png"));
		loeschen.setWidth("50px");

		buttonLayout.addComponent(bearbeiten);
		buttonLayout.addComponent(loeschen);
		buttonLayout.addComponent(einloggen);
		return buttonLayout;
	}

	private Window buildEditLogInWindow(final int i) {
		
		Statement stm;
		try {
		stm = Backend.ConnectionManager.Instance.createStatement();
		final Lecture lecture = Lecture.selectLecture(stm, i);
		final Window loginWindow = new Window("Login");
		loginWindow.setModal(true);
		loginWindow.setClosable(false);
		loginWindow.setWidth("220px");
		loginWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);

		final PasswordField passw = new PasswordField("password");
		passw.focus();
		Button buttonLogin = new Button("OK!");
		buttonLogin.setClickShortcut(KeyCode.ENTER);
		buttonLogin.addClickListener(new Button.ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = -6217547559765372442L;

			@Override
			public void buttonClick(ClickEvent event) {
				loginWindow.close();
				String pw = passw.getValue();
				if (pw.equals(lecture.getPassword())) {
					final Window editWindow = buildEditWindow(i);
					main.addWindow(editWindow);

				} else {
					Notification.show("Fehlerhafter Login");
				}
			}
		});

		loginWindow.setContent(vertLay);
		vertLay.addComponent(passw);
		vertLay.setComponentAlignment(passw, Alignment.TOP_CENTER);
		vertLay.addComponent(buttonLogin);
		vertLay.setComponentAlignment(buttonLogin, Alignment.TOP_CENTER);
		loginWindow.center();
		return loginWindow;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return new Window("Fehler");
		
	}

	private Window buildLogInWindow(int i) {
		Statement stm;
		try {
		stm = Backend.ConnectionManager.Instance.createStatement();
		final Lecture lecture = Lecture.selectLecture(stm, i);
		final Window loginWindow = new Window("Login");
		loginWindow.setModal(true);
		loginWindow.setClosable(false);
		loginWindow.setWidth("220px");
		loginWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);

		final PasswordField passw = new PasswordField("password");
		passw.focus();
		Button buttonLogin = new Button("OK!");
		buttonLogin.setClickShortcut(KeyCode.ENTER);
		buttonLogin.addClickListener(new Button.ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = -4340713177394448178L;

			@Override
			public void buttonClick(ClickEvent event) {
				loginWindow.close();
				String pw = passw.getValue();
				if (pw.equals(lecture.getPassword())) {
					if (main.getVeranstaltung()==0) {
						tabSheetLeft.getTab(dozentTab).setVisible(true);
						tabSheetLeft.getTab(studentTab).setVisible(true);
					}
					main.setVeranstaltung(lecture.getId());
					Broadcaster.broadcast("NewLectureLogIn");
				} else {
					Notification.show("Fehlerhafter Login");
				}
			}
		});

		loginWindow.setContent(vertLay);
		vertLay.addComponent(passw);
		vertLay.setComponentAlignment(passw, Alignment.TOP_CENTER);
		vertLay.addComponent(buttonLogin);
		vertLay.setComponentAlignment(buttonLogin, Alignment.TOP_CENTER);
		loginWindow.center();
		return loginWindow;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return new Window("Fehler");
		
	}

	private Window buildEditWindow(int i) {
		final Statement stm;
		try {
		stm = Backend.ConnectionManager.Instance.createStatement();
	    final Lecture lecture = Lecture.selectLecture(stm, i);
		final Window editWindow = new Window("Bearbeiten");
		editWindow.setModal(true);
		editWindow.setClosable(false);
		editWindow.setWidth("650px");
		editWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);

		final TextField name = new TextField("Name");
		name.setValue(lecture.getName());
		name.focus();
		final TextField raum = new TextField("Raum");
		raum.setValue(lecture.getRoom());
		final DateField date = new DateField("Datum");
		Calendar c = new GregorianCalendar();
	    c.set(Calendar.HOUR_OF_DAY, 0); //anything 0 - 23
	    c.set(Calendar.MINUTE, 0);
	    c.set(Calendar.SECOND, 0);
	    Date today = c.getTime(); 
		date.setRangeStart(today);
		date.setValue(lecture.getDate());
		date.setImmediate(true);
		final TextField passw = new TextField("Passwort");
		passw.setValue(lecture.getPassword());
		final TextField dozent = new TextField("Dozent");
		dozent.setValue(lecture.getProfessorID());
		final TextField speedLimit = new TextField("SpeedLimit");
		speedLimit.setValue(""+lecture.getSpeedLimit());
		final TextField volumeLimit = new TextField("VolumeLimit");
		volumeLimit.setValue(""+lecture.getVolumeLimit());
		final TextField votingLimit= new TextField("VotingLimit");
		votingLimit.setValue(""+lecture.getVotingLimit());

		Button buttonOK = new Button("OK!");
		buttonOK.setClickShortcut(KeyCode.ENTER);
		buttonOK.addClickListener(new Button.ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 7053270910680210719L;

			@Override
			public void buttonClick(ClickEvent event) {
				
				if (!correctINT(speedLimit.getValue()) && !correctINT(volumeLimit.getValue()) && !correctINT(votingLimit.getValue()) && date.getValue()!=null){
					editWindow.close();
					lecture.setDate(date.getValue());
					lecture.setProfessorID(dozent.getValue());
					lecture.setRoom(raum.getValue());
					lecture.setName(name.getValue());
					lecture.setPassword(passw.getValue());
					lecture.setSpeedLimit(Integer.parseInt(speedLimit.getValue()));
					lecture.setVolumeLimit(Integer.parseInt(volumeLimit.getValue()));
					lecture.setVotingLimit(Integer.parseInt(votingLimit.getValue()));
			
					try {
						lecture.update(stm);
						Notification.show("Erfolgreich!");
						if (isToday(lecture.getDate())) Broadcaster.broadcast("LectureToday");
						else Broadcaster.broadcast("Lecture");
					} catch (SQLException e) {
						Notification.show("Fehler beim bearbeiten!");
						e.printStackTrace();
					}
					
				}
				else {
					Notification.show("SpeedLimit & VolumeLimit & VotingLimit muessen Zahlen sein!Und das Datum in der Zukunft liegen!");
				}
			}
		});
		
		Button abbruch = new Button("Abbruch!", new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = -3043100463396473700L;

			@Override
			public void buttonClick(ClickEvent event) {
				editWindow.close();
			}
		});
		editWindow.setContent(vertLay);
		
		//Felder
		HorizontalLayout horizontal = new HorizontalLayout();
		VerticalLayout vertleft = new VerticalLayout();
		vertleft.setWidth("300px");
		vertleft.setSpacing(true);
		VerticalLayout vertright = new VerticalLayout();
		vertright.setWidth("300px");
		vertright.setSpacing(true);
		vertLay.addComponent(horizontal);
		horizontal.addComponent(vertleft);
		horizontal.addComponent(vertright);
		vertleft.addComponent(name);
		vertleft.addComponent(dozent);
		vertleft.addComponent(votingLimit);
		vertleft.addComponent(volumeLimit);
		vertright.addComponent(raum);
		vertright.addComponent(passw);
		vertright.addComponent(speedLimit);
		
		vertleft.setComponentAlignment(dozent, Alignment.TOP_CENTER);
		vertleft.setComponentAlignment(name, Alignment.TOP_CENTER);
		vertleft.setComponentAlignment(votingLimit, Alignment.TOP_CENTER);
		vertleft.setComponentAlignment(volumeLimit, Alignment.TOP_CENTER);
		vertright.setComponentAlignment(raum, Alignment.TOP_CENTER);
		vertright.setComponentAlignment(passw, Alignment.TOP_CENTER);
		vertright.setComponentAlignment(speedLimit, Alignment.TOP_CENTER);
		//Date + Buttons 
		vertLay.addComponent(date);
		HorizontalLayout buttonLayout= new HorizontalLayout();
		buttonLayout.setSpacing(true);
		buttonLayout.setSizeFull();
		buttonLayout.addComponent(abbruch);
		buttonLayout.addComponent(buttonOK);
		buttonLayout.setComponentAlignment(abbruch, Alignment.BOTTOM_CENTER);
		buttonLayout.setComponentAlignment(buttonOK, Alignment.BOTTOM_CENTER);
		vertLay.addComponent(buttonLayout);
		vertLay.setSpacing(true);

		vertLay.setComponentAlignment(date, Alignment.TOP_CENTER);
		vertLay.setComponentAlignment(buttonLayout, Alignment.BOTTOM_RIGHT);
		
		editWindow.center();
		return editWindow;
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return new Window("Fehler");
	
	}

	private Window buildNewWindow() {
		final Statement stm;
		try {
		stm = Backend.ConnectionManager.Instance.createStatement();
		final Window newWindow = new Window("Erstellen");
		newWindow.setModal(true);
		newWindow.setClosable(false);
		newWindow.setWidth("650px");
		newWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		VerticalLayout vertLay = new VerticalLayout();

		final TextField name = new TextField("Name");
		name.setValue("Name");
		name.focus();
		final TextField raum = new TextField("Raum");
		raum.setValue("Raum");
		final DateField date = new DateField("Datum");
		Calendar c = new GregorianCalendar();
	    c.set(Calendar.HOUR_OF_DAY, 0); //anything 0 - 23
	    c.set(Calendar.MINUTE, 0);
	    c.set(Calendar.SECOND, 0);
	    Date today = c.getTime(); 
		date.setRangeStart(today);
		date.setValue(null);
		final TextField passw = new TextField("Passwort");
		passw.setValue("Passwort");
		final TextField dozent = new TextField("Dozent");
		dozent.setValue("Dozent");
		final TextField speedLimit = new TextField("SpeedLimit");
		speedLimit.setValue("100");
		final TextField volumeLimit = new TextField("VolumeLimit");
		volumeLimit.setValue("100");
		final TextField votingLimit= new TextField("VotingLimit");
		votingLimit.setValue("100");
		
		
		Button buttonOK = new Button("Erstellen");
		buttonOK.setClickShortcut(KeyCode.ENTER);
		buttonOK.addClickListener(new Button.ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = -3773765546998587632L;

			@Override
			public void buttonClick(ClickEvent event) {
				Lecture lecture;
				if (!correctINT(speedLimit.getValue()) && !correctINT(volumeLimit.getValue()) && !correctINT(votingLimit.getValue()) && date.getValue()!=null){
					newWindow.close();
					lecture = new Lecture(date.getValue(),dozent.getValue(),raum.getValue(),name.getValue(),
						passw.getValue(),0,0,Integer.parseInt(speedLimit.getValue()),Integer.parseInt(volumeLimit.getValue()),
						Integer.parseInt(votingLimit.getValue()));
						Notification.show("Erfolgreich!");
						if (isToday(date.getValue())) Broadcaster.broadcast("LectureToday");
						else Broadcaster.broadcast("Lecture");
					try {
						lecture.insert(stm);
					} catch (SQLException | ParseException e) {
						e.printStackTrace();
						Notification.show("Fehler beim Erstellen!");
					}
				}
				else {
					Notification.show("SpeedLimit & VolumeLimit & VotingLimit muessen Zahlen sein!Und das Datum in der Zukunft liegen!");
				}
			}
		});

		Button abbruch = new Button("Abbruch!", new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = -648489425341201979L;

			@Override
			public void buttonClick(ClickEvent event) {
				newWindow.close();
			}
		});
		HorizontalLayout horizontal = new HorizontalLayout();
		VerticalLayout vertleft = new VerticalLayout();
		vertleft.setWidth("300px");
		vertleft.setSpacing(true);
		VerticalLayout vertright = new VerticalLayout();
		vertright.setWidth("300px");
		vertright.setSpacing(true);
		vertLay.addComponent(horizontal);
		horizontal.addComponent(vertleft);
		horizontal.addComponent(vertright);
		vertleft.addComponent(name);
		vertleft.addComponent(dozent);
		vertleft.addComponent(votingLimit);
		vertleft.addComponent(volumeLimit);
		vertright.addComponent(raum);
		vertright.addComponent(passw);
		vertright.addComponent(speedLimit);
		
		vertleft.setComponentAlignment(dozent, Alignment.TOP_CENTER);
		vertleft.setComponentAlignment(name, Alignment.TOP_CENTER);
		vertleft.setComponentAlignment(votingLimit, Alignment.TOP_CENTER);
		vertleft.setComponentAlignment(volumeLimit, Alignment.TOP_CENTER);
		vertright.setComponentAlignment(raum, Alignment.TOP_CENTER);
		vertright.setComponentAlignment(passw, Alignment.TOP_CENTER);
		vertright.setComponentAlignment(speedLimit, Alignment.TOP_CENTER);
		
		newWindow.setContent(vertLay);

		vertLay.addComponent(date);
		HorizontalLayout buttonLayout= new HorizontalLayout();
		buttonLayout.setSpacing(true);
		buttonLayout.setSizeFull();
		buttonLayout.addComponent(abbruch);
		buttonLayout.addComponent(buttonOK);
		buttonLayout.setComponentAlignment(abbruch, Alignment.BOTTOM_CENTER);
		buttonLayout.setComponentAlignment(buttonOK, Alignment.BOTTOM_CENTER);
		vertLay.addComponent(buttonLayout);
		vertLay.setSpacing(true);

		vertLay.setComponentAlignment(date, Alignment.TOP_CENTER);
		vertLay.setComponentAlignment(buttonLayout, Alignment.BOTTOM_RIGHT);
		newWindow.center();
		return newWindow;
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return new Window("Fehler");
	
	}

	private Window buildDeleteWindow(int i) {
		final Statement stm;
		try {
		stm = Backend.ConnectionManager.Instance.createStatement();
		final Lecture lecture = Lecture.selectLecture(stm, i);
		final Window deleteWindow = new Window("Loeschen");
		deleteWindow.setModal(true);
		deleteWindow.setClosable(false);
		deleteWindow.setWidth("220px");
		deleteWindow.addStyleName(Reindeer.WINDOW_LIGHT);
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSpacing(true);

		final PasswordField passw = new PasswordField("password");
		passw.focus();
		Button loeschenButton = new Button("Loeschen");
		loeschenButton.setClickShortcut(KeyCode.ENTER);
		loeschenButton.addClickListener(new Button.ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = -9172916318353548919L;

			@Override
			public void buttonClick(ClickEvent event) {
				deleteWindow.close();
				String pw = passw.getValue();
				if (pw.equals(lecture.getPassword())) {
					try {
						lecture.delete(stm);
						Notification.show("Erfolgreich!");
						if (isToday(lecture.getDate())) Broadcaster.broadcast("LectureToday");
						else Broadcaster.broadcast("Lecture");
					} catch (SQLException e) {
						e.printStackTrace();
						Notification.show("Fehler beim Loeschen!");
					}

				} else {
					Notification.show("Fehlerhafter Login");
				}
			}
		});

		deleteWindow.setContent(vertLay);
		vertLay.addComponent(passw);
		vertLay.setComponentAlignment(passw, Alignment.TOP_CENTER);
		vertLay.addComponent(loeschenButton);
		vertLay.setComponentAlignment(loeschenButton, Alignment.TOP_CENTER);
		deleteWindow.center();
		return deleteWindow;
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return new Window("Fehler");
	
	}
	private boolean correctINT(String i){
		try { 
			@SuppressWarnings("unused")
			int buffer = Integer.parseInt(i);
		} catch (Exception e) { 
			return true;
		}
		return false;
	}
	public static boolean isValid(Date date) {
		Calendar cal1 = Calendar.getInstance();
        cal1.setTime(date);
        Calendar cal2 = Calendar.getInstance();
        cal2.setTime(Calendar.getInstance().getTime());
        if (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))return true;
        	
        if (cal1.get(Calendar.ERA) < cal2.get(Calendar.ERA)) return false;
        if (cal1.get(Calendar.ERA) > cal2.get(Calendar.ERA)) return true;
        if (cal1.get(Calendar.YEAR) < cal2.get(Calendar.YEAR)) return false;
        if (cal1.get(Calendar.YEAR) > cal2.get(Calendar.YEAR)) return true;
        
        return false;
	}
	
	
	public void receiveBroadcast(final String message) {
		try{
			main.access(new Runnable() {				
				@Override
				public void run() {
					
					if( message.equals("LectureToday") || message.equals("Lecture")){
							tabSheetLeft.setImmediate(true);
							tabSheetLeft.markAsDirty();
							tabSheetLeft.removeTab(tabSheetLeft.getTab(1));
							tabSheetLeft.addTab(buildVeranstaltungsTab(), 1);
							tabSheetLeft.getTab(1).setCaption("Veranstaltungen");
							tabSheetLeft.setSelectedTab(tabSheetLeft.getTab(1));
					}
					if( message.equals("NewLectureLogIn")){		
							tabSheetLeft.setImmediate(true);
							tabSheetLeft.removeTab(tabSheetLeft.getTab(3));
							tabSheetLeft.removeTab(tabSheetLeft.getTab(2));
							tabSheetLeft.addComponent(buildDozentTab());
							tabSheetLeft.addComponent(buildStudentTab());
							tabSheetLeft.markAsDirty();	
							tabSheetLeft.setSelectedTab(tabSheetLeft.getTab(2));
					}
					if (message.equals("NewRole")){
							tabSheetLeft.setImmediate(true);
							tabSheetLeft.removeTab(tabSheetLeft.getTab(0));
							tabSheetLeft.addTab(buildAdminTab(),0);
							tabSheetLeft.setSelectedTab(tabSheetLeft.getTab(0));
							tabSheetLeft.markAsDirty();
					}
					}
				});
			}catch(Exception e){ 
				e.printStackTrace();
			}
	}
	
	public void detach(){
		Broadcaster.unregister(this);
		super.detach();
	}
	private boolean isToday(Date date){
		 Calendar cal1 = Calendar.getInstance();
	        cal1.setTime(date);
	    Calendar cal2 = Calendar.getInstance();
		return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
              cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
              cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
	}
	private ArrayList<Lecture> deleteOld(ArrayList<Lecture> lectures){
		ArrayList<Lecture> lecs = new ArrayList<Lecture>();
		for (int i=0 ; i< lectures.size();i++){
			if (isOld(lectures.get(i).getDate())){
				try {
					Statement stm = Backend.ConnectionManager.Instance.createStatement();
					lectures.get(i).delete(stm);
				}catch (Exception e){
					e.printStackTrace();
				}
			}else {
				lecs.add(lectures.get(i));
			}	
		}
		return lecs;
	}
	
	private boolean isOld(Date date){
		 Calendar cal1 = Calendar.getInstance();
		 cal1.setTime(date);
		 Calendar cal2 = Calendar.getInstance();
		 if (cal1.get(Calendar.ERA) < cal2.get(Calendar.ERA)) return true;
		 if (cal1.get(Calendar.ERA) > cal2.get(Calendar.ERA)) return false;
		 if (cal1.get(Calendar.YEAR) < cal2.get(Calendar.YEAR)) return true;
		 if (cal1.get(Calendar.YEAR) > cal2.get(Calendar.YEAR)) return false;
		 return cal1.get(Calendar.DAY_OF_YEAR) < cal2.get(Calendar.DAY_OF_YEAR);
		
	}
}