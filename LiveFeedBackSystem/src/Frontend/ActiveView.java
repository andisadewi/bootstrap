package Frontend;


import java.io.File;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import Backend.Question;
import Backend.Response;
import Backend.Rights;
import Backend.Roles;
import Backend.Survey;
import Backend.Voting;
import Designs.BannerTop;
import DesignsDo.ButtonsDo;
import DesignsDo.FragenDo;
import DesignsDo.UmfragenDo;
import DesignsStu.ButtonsStu;
import DesignsStu.FragenStu;
import DesignsStu.UmfragenStu;

import com.vaadin.annotations.PreserveOnRefresh;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FileDownloader;
import com.vaadin.server.FileResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

@PreserveOnRefresh
public class ActiveView extends CustomComponent implements View {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -1220690092251181027L;
	//generell
	private AbsoluteLayout mainLayout;
	private HorizontalLayout mainHorizontalLayout;
	private MainUI main;
	private VerticalLayout mainVertical;
	private TabSheet tabSheetLeft;
	//banner
	private BannerTop banner;
	private FragenStu fragenStu ;

	
	/**  
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor. 
	 * @param mainUI 
	 */
	public ActiveView(MainUI main) {
		this.main=main; 
	}

	
	@Override
	public void enter(ViewChangeEvent event) {
		if (main.getLoggedInUser()==null) main.getNavigator().navigateTo(MainUI.LOGIN);
		if (main.getVeranstaltung()==0) main.getNavigator().navigateTo(MainUI.FIRSTVIEW);
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}
	
	
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100.0%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// mainVertical
				mainVertical = buildMainVertical();
				mainLayout.addComponent(mainVertical, "top:0.0px;left:0.0px;right:-2.0px;bottom:-2.0px");
				
		return mainLayout;
	}
	

	
	private VerticalLayout buildMainVertical(){
		// common part: create layout
			mainVertical = new VerticalLayout();
			HorizontalLayout buttonLay = new HorizontalLayout();
			mainVertical.setImmediate(false);
			mainVertical.setWidth("100.0%");
			mainVertical.setHeight("100.0%");
			mainVertical.setMargin(false);
			mainVertical.setSpacing(true);
		//banner
			banner= new BannerTop(main);
			mainVertical.addComponent(banner);
			Button ausloggVeranstaltung = new Button(null, new Button.ClickListener() {
				
				/**
				 * 
				 */
				private static final long serialVersionUID = -4572486631283925457L;

				@Override
				public void buttonClick(ClickEvent event) {
					if(main.getRole().contains("Professor")){
						Window win = buildLogOut();
						main.addWindow(win);
					}else{
					main.setVeranstaltung(0);
					main.getNavigator().navigateTo(MainUI.FIRSTVIEW);
				}}
			});
			ausloggVeranstaltung.addStyleName(Reindeer.BUTTON_LINK);
			ausloggVeranstaltung.setIcon(new ThemeResource("Icons/Faenza/actions/22/go-previous.png"));
			mainVertical.addComponent(buttonLay);
			buttonLay.addComponent(ausloggVeranstaltung);
		//mainHorizontal
			mainHorizontalLayout = buildMainHorizontal();
			mainHorizontalLayout.setSpacing(true);
			mainVertical.addComponent(mainHorizontalLayout);
			mainVertical.setExpandRatio(mainHorizontalLayout, 8.0f);
			
			return mainVertical;
	}
	
	private Window buildLogOut(){
		Window logOut = new Window();
		logOut.center();
		logOut.addStyleName(Reindeer.WINDOW_LIGHT);
		logOut.setWidth("300px");
		logOut.setHeight("100px");
		VerticalLayout vertLay = new VerticalLayout();
		vertLay.setSizeFull();
		HorizontalLayout horLay = new HorizontalLayout();
		horLay.setSizeFull();
		Button logOutButton = new Button("Logout");
		logOutButton.addClickListener(new Button.ClickListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = -427713960409142199L;

			@Override
			public void buttonClick(ClickEvent event) {
				main.setVeranstaltung(0);
				main.getNavigator().navigateTo(MainUI.FIRSTVIEW);
				
			}
		});
		System.out.println(System.getProperty("user.dir"));
		Statement stm;
		ArrayList<Survey> surveys = new ArrayList<Survey >();
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
			ArrayList<Question> questions = Question.selectAll(stm, main.getVeranstaltung());
			PrintWriter out = new PrintWriter("Fragen.txt");
			for (int i = 0; i < questions.size(); i++) {
				out.println("Question " + (i+1) + ": " + questions.get(i).getText() + "		votes: " + Voting.selectFromID(stm, questions.get(i).getId()).size() + "\n");
			}
			surveys = Survey.selectSurveysFromLecture(stm, main.getVeranstaltung());
			for (int i = 0; i < surveys.size(); i++) {
				out.println("\n\n" + "Survey " + (i+1) + ": " + surveys.get(i).getText() + "\n");
				stm = Backend.ConnectionManager.Instance.createStatement();
				ArrayList<String> responses = Response.selectResponsesText(stm, surveys.get(i).getId());
				for (int j = 0; j < responses.size(); j++) {
					out.println("	Response " + (j+1) + ": " + responses.get(j) + "\n");
				}
			}
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		Button download = new Button("Download");
		FileResource res = new FileResource(new File(System.getProperty("user.dir") + "/Fragen.txt"));
		FileDownloader fd = new FileDownloader(res);
		fd.extend(download);
		for (int i = 0; i < surveys.size(); i++) {
			File file = new File(System.getProperty("user.dir") + "/" + UmfragenDo.buildChart(surveys.get(i)));
			FileResource res2 = new FileResource(file);
			FileDownloader fd2 = new FileDownloader(res2);
			fd2.extend(download);
		
			//file.delete();
		}
		logOut.setContent(vertLay);
		vertLay.addComponent(horLay);
		horLay.addComponent(logOutButton);
		horLay.setComponentAlignment(logOutButton, Alignment.BOTTOM_CENTER);
		horLay.addComponent(download);
		horLay.setComponentAlignment(download, Alignment.BOTTOM_CENTER);
		return logOut;

	}
	private HorizontalLayout buildMainHorizontal() {
		mainHorizontalLayout = new HorizontalLayout();
		mainHorizontalLayout.setWidth("100.0%");
		mainHorizontalLayout.setHeight("100.0%");
		
		if (main.getRole().equals("Student")){
			UmfragenStu umfragen = new UmfragenStu(main);
			fragenStu = new FragenStu(main);
			ButtonsStu buttons = new ButtonsStu(main);
			mainHorizontalLayout.addComponent(umfragen);
			mainHorizontalLayout.addComponent(fragenStu);
			mainHorizontalLayout.addComponent(buttons);		

		
		}
		else if (main.getRole().contains("Professor")){
			UmfragenDo	umfragen = new UmfragenDo(main);
			FragenDo	fragen	= new FragenDo(main);
			ButtonsDo	buttons	= new ButtonsDo(main);
			mainHorizontalLayout.addComponent(umfragen);
			mainHorizontalLayout.addComponent(fragen);
			mainHorizontalLayout.addComponent(buttons);

	
			
		}
		//sonderrechte
		else {
			tabSheetLeft = buildTabSheetLeft();
			mainHorizontalLayout.addComponent(tabSheetLeft);
			
			
		}
		return mainHorizontalLayout;
		
	}
	private TabSheet buildTabSheetLeft() {
		// common part: create layout
				tabSheetLeft = new TabSheet();
				tabSheetLeft.setImmediate(true);
				tabSheetLeft.setWidth("100.0%");
				tabSheetLeft.setHeight("100.0%");
				
				HorizontalLayout firstHorizontal = new HorizontalLayout();
				firstHorizontal.setWidth("100%");
				firstHorizontal.setHeight("100%");
				firstHorizontal.setSpacing(true);
					UmfragenStu umfragen = new UmfragenStu(main);
					FragenStu fragen = new FragenStu(main);
					ButtonsStu buttons = new ButtonsStu(main);
					firstHorizontal.addComponent(umfragen);
					firstHorizontal.addComponent(fragen);
					firstHorizontal.addComponent(buttons);	
				
				tabSheetLeft.addTab(firstHorizontal,"Student");
				boolean used = false;
				HorizontalLayout secondHorizontal = new HorizontalLayout();
				secondHorizontal.setWidth("100%");
				secondHorizontal.setHeight("100%");
				secondHorizontal.setSpacing(true);
				//TODO Rechte abfragen	 
				if  (getRightForUmfragen()){
					System.out.println("umfrage");
					UmfragenDo umfrage = new UmfragenDo(main);
					secondHorizontal.addComponent(umfrage);
					used= true;
				}
				if (getRightForFragen()){ 
					System.out.println("fragen");
					FragenDo frage = new FragenDo(main);
					secondHorizontal.addComponent(frage);
					used= true;	
				}
				if(getRightForButtons()){
					System.out.println("buttons");
					ButtonsDo button = new ButtonsDo(main);
					secondHorizontal.addComponent(button);
					used = true;
				}
				if (used) tabSheetLeft.addTab(secondHorizontal,"Erweitert");		
				return tabSheetLeft;
	}
	
	
	private boolean getRightForFragen(){
		Statement stm;
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
			Roles roles = Roles.select(stm, main.getLoggedInUser());
			stm = Backend.ConnectionManager.Instance.createStatement();
			ArrayList<Rights> rights= Rights.selectRights(stm, roles.getroleID());
			
			for (int i=0;i<rights.size();i++){
				if (rights.get(i).getId()==4)return true;
			}
		return false;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	private boolean getRightForUmfragen(){
		Statement stm;
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
			Roles roles = Roles.select(stm, main.getLoggedInUser());
			stm = Backend.ConnectionManager.Instance.createStatement();
			ArrayList<Rights> rights= Rights.selectRights(stm, roles.getroleID());
			for (int i=0;i<rights.size();i++){
				if (rights.get(i).getId()==3)return true;
			}
		return false;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	private boolean getRightForButtons(){
		Statement stm;
		try {
			stm = Backend.ConnectionManager.Instance.createStatement();
			Roles roles = Roles.select(stm, main.getLoggedInUser());
			stm = Backend.ConnectionManager.Instance.createStatement();
			ArrayList<Rights> rights= Rights.selectRights(stm, roles.getroleID());
			for (int i=0;i<rights.size();i++){
				if (rights.get(i).getId()==5)return true;
			}
		return false;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
}
